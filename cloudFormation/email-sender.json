{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "CloudFormation template to create email-sender and common resources.",
    "Resources": {
        "modulesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [ {
                    "AttributeName": "id",
                    "AttributeType": "S"
                }
                ],
                "KeySchema": [
                    { "AttributeName": "id", "KeyType": "HASH" }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                },
                "Tags": [ { "Key": "name", "Value": "Modules" } ]
            }
        },
        "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [ {
                    "AttributeName": "name",
                    "AttributeType": "S"
                }
                ],
                "KeySchema": [
                    { "AttributeName": "name", "KeyType": "HASH" }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                },
                "Tags": [ { "Key": "name", "Value": "Users" } ]
            }
        },

        "codeBucket": {
            "Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Sub": "email-sender-code-${AWS::Region}-${AWS::AccountId}"
				}
			}
        },

        "lambdaRole": {
            "Type": "AWS::IAM::Role",
             "Properties": {
                "AssumeRolePolicyDocument": {
                   "Version" : "2012-10-17",
                   "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
                },
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "EmailSenderLambdaPolicy",
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [ { "Effect": "Allow", 
                            "Action": [
                                "s3:*",
                                "dynamodb:*",
                                "xray:*",
                                "dax:*",
                                "application-autoscaling:DeleteScalingPolicy",
                                "application-autoscaling:DeregisterScalableTarget",
                                "application-autoscaling:DescribeScalableTargets",
                                "application-autoscaling:DescribeScalingActivities",
                                "application-autoscaling:DescribeScalingPolicies",
                                "application-autoscaling:PutScalingPolicy",
                                "application-autoscaling:RegisterScalableTarget",
                                "cloudwatch:DeleteAlarms",
                                "cloudwatch:DescribeAlarmHistory",
                                "cloudwatch:DescribeAlarms",
                                "cloudwatch:DescribeAlarmsForMetric",
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:ListMetrics",
                                "cloudwatch:PutMetricAlarm",
                                "datapipeline:ActivatePipeline",
                                "datapipeline:CreatePipeline",
                                "datapipeline:DeletePipeline",
                                "datapipeline:DescribeObjects",
                                "datapipeline:DescribePipelines",
                                "datapipeline:GetPipelineDefinition",
                                "datapipeline:ListPipelines",
                                "datapipeline:PutPipelineDefinition",
                                "datapipeline:QueryObjects",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeSecurityGroups",
                                "iam:GetRole",
                                "iam:ListRoles",
                                "sns:CreateTopic",
                                "sns:DeleteTopic",
                                "sns:ListSubscriptions",
                                "sns:ListSubscriptionsByTopic",
                                "sns:ListTopics",
                                "sns:Subscribe",
                                "sns:Unsubscribe",
                                "sns:SetTopicAttributes",
                                "lambda:CreateFunction",
                                "lambda:ListFunctions",
                                "lambda:ListEventSourceMappings",
                                "lambda:CreateEventSourceMapping",
                                "lambda:DeleteEventSourceMapping",
                                "lambda:GetFunctionConfiguration",
                                "lambda:DeleteFunction",
                                "cloudformation:Describe*",
                                "cloudformation:EstimateTemplateCost",
                                "cloudformation:Get*",
                                "cloudformation:List*",
                                "cloudformation:ValidateTemplate",
                                "kms:ListKeys",
                                "kms:Decrypt",
                                "kms:Encrypt",
                                "kms:ReEncryptTo",
                                "kms:GenerateDataKey",
                                "kms:GenerateDataKeyWithoutPlaintext",
                                "kms:DescribeKey",
                                "kms:ReEncryptFrom",
                                "ses:SendEmail",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ], 
                            "Resource": "*" } ]
                    }
                }
                ]
            }
        },

        "emailSenderLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "emailSender.handler",
                "Role": { "Fn::GetAtt": ["lambdaRole", "Arn"] },
                "Code": {
                    "S3Bucket": { "Ref": "codeBucket" },
                    "S3Key": "email-sender.zip"
                },
                "Runtime": "nodejs12.x",
                "Timeout": 300,
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "emailSenderTrigger": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "ScheduleRule",
                "ScheduleExpression": "cron(0 12 ? * SUN *)",
                "State": "ENABLED",
                "Targets": [{
                    "Arn": { "Fn::GetAtt": ["emailSenderLambda", "Arn"] },
                    "Id": "emailSenderV1-defaultj"
                }]
            }
        },
        "PermissionForEventsToInvokeEmailSenderLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "emailSenderLambda" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["emailSenderTrigger", "Arn"] }
            }
        }
    }
}
